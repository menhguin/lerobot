name: Test

on:
  pull_request:
    branches:
      - main
    types: [opened, synchronize, reopened, labeled]
  push:
    branches:
      - main

jobs:
  test:
    if: |
      ${{ github.event_name == 'pull_request' && contains(github.event.pull_request.labels.*.name, 'CI') }} ||
      ${{ github.event_name == 'push' }}
    runs-on: ubuntu-latest
    env:
      POETRY_VERSION: 1.8.1
    steps:
      #----------------------------------------------
      #       check-out repo and set-up python
      #----------------------------------------------
      - name: Check out repository
        uses: actions/checkout@v4
      - name: Set up python
        id: setup-python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      #----------------------------------------------
      #         install & configure poetry
      #----------------------------------------------
      - name: Load cached Poetry installation
        id: restore-poetry-cache
        uses: actions/cache/restore@v3
        with:
          path: ~/.local  # the path depends on the OS
          key: poetry-${{ env.POETRY_VERSION }}  # increment to reset cache
      - name: Install Poetry
        if: steps.restore-poetry-cache.outputs.cache-hit != 'true'
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          installer-parallel: true
      - name: Save cached Poetry installation
        if: |
          steps.restore-poetry-cache.outputs.cache-hit != 'true' &&
          github.ref_name == 'main'
        id: save-poetry-cache
        uses: actions/cache/save@v3
        with:
          path: ~/.local  # the path depends on the OS
          key: poetry-${{ env.POETRY_VERSION }}  # increment to reset cache
      - name: Configure Poetry
        run: poetry config virtualenvs.in-project true
      #----------------------------------------------
      #           install dependencies
      #----------------------------------------------
      - name: Load cached venv
        id: restore-dependencies-cache
        uses: actions/cache/restore@v3
        with:
          path: .venv
          key: venv-${{ steps.setup-python.outputs.python-version }}-${{ env.POETRY_VERSION }}-${{ hashFiles('**/poetry.lock') }}
      - name: Install dependencies
        if: steps.restore-dependencies-cache.outputs.cache-hit != 'true'
        run: |
          poetry install --no-interaction --no-root
          git clone https://github.com/real-stanford/diffusion_policy
          cp -r diffusion_policy/diffusion_policy $(poetry env info -p)/lib/python3.10/site-packages/
      - name: Save cached venv
        if: |
            steps.restore-dependencies-cache.outputs.cache-hit != 'true' &&
            github.ref_name == 'main'
        id: save-dependencies-cache
        uses: actions/cache/save@v3
        with:
          path: .venv
          key: venv-${{ steps.setup-python.outputs.python-version }}-${{ env.POETRY_VERSION }}-${{ hashFiles('**/poetry.lock') }}
      #----------------------------------------------
      #             install project
      #----------------------------------------------
      - name: Install project
        run: poetry install --no-interaction
      #----------------------------------------------
      #               run tests
      #----------------------------------------------
      - name: Run tests
        run: |
          source .venv/bin/activate
          pytest tests
      - name: Test train pusht end-to-end
        run: |
          source .venv/bin/activate
          python lerobot/scripts/train.py \
            hydra.job.name=pusht \
            env=pusht \
            wandb.enable=False \
            offline_steps=1 \
            online_steps=0 \
            device=cpu
      # TODO(rcadene, aliberts): Add end-to-end test of eval checkpoint post training
      # - name: Test eval pusht end-to-end
      #   run: |
      #     source .venv/bin/activate
      #     python lerobot/scripts/eval.py
      #       hydra.job.name=pusht \
      #       env=pusht \
      #       wandb.enable=False \
      #       eval_episodes=1 \
      #       device=cpu
      #----------------------------------------------
      #              cleanup
      #----------------------------------------------
      - name: Cleanup
        run: rm -rf diffusion_policy data
